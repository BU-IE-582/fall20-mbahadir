getwd()
library(data.table)
install.packages("plotly")
library(plotly)
x_train=fread("uWaveGestureLibrary_X_TRAIN")
x_test=fread("uWaveGestureLibrary_X_TEST")
y_train=fread("uWaveGestureLibrary_Y_TRAIN")
y_test=fread("uWaveGestureLibrary_Y_TEST")
z_train=fread("uWaveGestureLibrary_Z_TRAIN")
z_test=fread("uWaveGestureLibrary_Z_TEST")
#PART1
first_ins <- data.table(x=t(x_train[1,2:315]),
y=t(y_train[1,2:315]),
z=t(z_train[1,2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
setwd("~/GitHub/IE582-fall20-mbahadir/Homework2")
x_train=fread("uWaveGestureLibrary_X_TRAIN")
x_test=fread("uWaveGestureLibrary_X_TEST")
y_train=fread("uWaveGestureLibrary_Y_TRAIN")
y_test=fread("uWaveGestureLibrary_Y_TEST")
z_train=fread("uWaveGestureLibrary_Z_TRAIN")
z_test=fread("uWaveGestureLibrary_Z_TEST")
#PART1
first_ins <- data.table(x=t(x_train[1,2:315]),
y=t(y_train[1,2:315]),
z=t(z_train[1,2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
first_ins$z_cm=cumsum(first_ins$z)
fig <- plot_ly(first_ins, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
View(x_test)
View(first_ins)
x_train[,-1]
View(x_train)
which(x_train$V1=="")
1
which(x_train$V1==2)
which(x_train$V1==2)[1]
which(x_train$V1==2)[1]
which(x_train$V1==1)[1]
which(x_train$V1==2)[1]
which(x_train$V1==3)[1]
which(x_train$V1==4)[1]
which(x_train$V1==5)[1]
which(x_train$V1==6)[1]
which(x_train$V1==7)[1]
which(x_train$V1==8)[1]
class1_ind<-which(x_train$V1==1)[1]
class1_ind
#PART1
indexes<-c(class1_ind,class2_ind)
class1_ind<-which(x_train$V1==1)[1]
class2_ind<-which(x_train$V1==2)[1]
class3_ind<-which(x_train$V1==3)[1]
class4_ind<-which(x_train$V1==4)[1]
class5_ind<-which(x_train$V1==5)[1]
class6_ind<-which(x_train$V1==6)[1]
class7_ind<-which(x_train$V1==7)[1]
class8_ind<-which(x_train$V1==8)[1]
#PART1
indexes<-c(class1_ind,class2_ind)
#PART1
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
#PART1
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
for(i in 1:8){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
first_ins$z_cm=cumsum(first_ins$z)
fig <- plot_ly(first_ins, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
for(i in 1:2){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
first_ins$z_cm=cumsum(first_ins$z)
fig <- plot_ly(first_ins, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
#PART1
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
for(i in 1:2){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
first_ins$z_cm=cumsum(first_ins$z)
fig <- plot_ly(first_ins, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
for(i in 2:3){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
first_ins$z_cm=cumsum(first_ins$z)
fig <- plot_ly(first_ins, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
for(i in 2:3){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
first_ins$z_cm=cumsum(first_ins$z)
fig <- plot_ly(first_ins, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
for(i in 5:7){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(first_ins)[names(first_ins) == "x.V1"] <- "x"
names(first_ins)[names(first_ins) == "y.V1"] <- "y"
names(first_ins)[names(first_ins) == "z.V1"] <- "z"
first_ins$x_cm=cumsum(first_ins$x)
first_ins$y_cm=cumsum(first_ins$y)
first_ins$z_cm=cumsum(first_ins$z)
fig <- plot_ly(first_ins, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
View(gesture)
#PART1
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
for(i in 5:7){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_cm=cumsum(gesture$x)
gesture$y_cm=cumsum(gesture$y)
gesture$z_cm=cumsum(gesture$z)
fig <- plot_ly(gesture, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
for(i in 1:8){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_cm=cumsum(gesture$x)
gesture$y_cm=cumsum(gesture$y)
gesture$z_cm=cumsum(gesture$z)
fig <- plot_ly(gesture, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
#PART1
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
for(i in 1:8){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_cm=cumsum(gesture$x)
gesture$y_cm=cumsum(gesture$y)
gesture$z_cm=cumsum(gesture$z)
fig <- plot_ly(gesture, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
View(gesture)
fig <- plot_ly(gesture, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
for(i in 1:8){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_cm=cumsum(gesture$x)
gesture$y_cm=cumsum(gesture$y)
gesture$z_cm=cumsum(gesture$z)
fig <- plot_ly(gesture, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
fname='/users/bahad/OneDrive/Belgeler/GitHub/IE582-fall20-mbahadir\Homework2/uWaveGestureLibrary_X_TRAIN'
fname='/users/bahad/OneDrive/Belgeler/GitHub/IE582-fall20-mbahadir/Homework2/uWaveGestureLibrary_X_TRAIN'
Xmat=as.matrix(read.table(fname))
Xtrain<-Xmat[,-1]
class<-Xmat[,1]
#getting the first gesture index with corresponding class information
class1=which(class == 1)[[1]]
class2=which(class == 2)[[1]]
class3=which(class == 3)[[1]]
class4=which(class == 4)[[1]]
class5=which(class == 5)[[1]]
class6=which(class == 6)[[1]]
class7=which(class == 7)[[1]]
class8=which(class == 8)[[1]]
#we have accelaration information at hand. we should first get velocity vector and then location information of the data set
rownumber=nrow(Xtrain)
colnumber=ncol(Xtrain)
Xvelocity<-matrix(0,nrow=rownumber,ncol=colnumber)
Xlocation<-matrix(0,nrow=rownumber,ncol=colnumber)
Yvelocity<-matrix(0,nrow=rownumber,ncol=colnumber)
Ylocation<-matrix(0,nrow=rownumber,ncol=colnumber)
Zvelocity<-matrix(0,nrow=rownumber,ncol=colnumber)
Zlocation<-matrix(0,nrow=rownumber,ncol=colnumber)
for(i in 1:rownumber)
{
Xvelocity[i,] <- cumsum(Xtrain[i,])
}
for(i in 1:rownumber)
{
Xlocation[i,] <- cumsum(Xvelocity[i,])
}
View(Xlocation)
fname='/users/bahad/OneDrive/Belgeler/GitHub/IE582-fall20-mbahadir/Homework2/uWaveGestureLibrary_Y_TRAIN'
Ymat=as.matrix(read.table(fname))
Ytrain<-Ymat[,-1]
Yvelocity[i,] <- cumsum(Ytrain[i,])
{
Yvelocity[i,] <- cumsum(Ytrain[i,])
}
for(i in 1:rownumber)
{
Ylocation[i,] <- cumsum(Yvelocity[i,])
}
View(Ylocation)
for(i in 1:rownumber)
{
Xlocation[i,] <- cumsum(Xvelocity[i,])
}
for(i in 1:rownumber)
{
Yvelocity[i,] <- cumsum(Ytrain[i,])
}
for(i in 1:rownumber)
{
Ylocation[i,] <- cumsum(Yvelocity[i,])
}
View(Ylocation)
getwd()
setwd("C:/Users/bahad/GitHub/IE582/Homework2")
setwd("C:/Users/bahad/GitHub/IE582/Homework2")
library(data.table)
install.packages("plotly")
install.packages("plotly")
library(plotly)
x_train=fread("uWaveGestureLibrary_X_TRAIN")
x_test=fread("uWaveGestureLibrary_X_TEST")
y_train=fread("uWaveGestureLibrary_Y_TRAIN")
y_test=fread("uWaveGestureLibrary_Y_TEST")
z_train=fread("uWaveGestureLibrary_Z_TRAIN")
z_test=fread("uWaveGestureLibrary_Z_TEST")
class1_ind<-which(x_train$V1==1)[1]
class2_ind<-which(x_train$V1==2)[1]
class3_ind<-which(x_train$V1==3)[1]
class4_ind<-which(x_train$V1==4)[1]
class5_ind<-which(x_train$V1==5)[1]
class6_ind<-which(x_train$V1==6)[1]
class7_ind<-which(x_train$V1==7)[1]
class8_ind<-which(x_train$V1==8)[1]
#PART1
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
for(i in 1:8){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_cm=cumsum(gesture$x)
gesture$y_cm=cumsum(gesture$y)
gesture$z_cm=cumsum(gesture$z)
fig <- plot_ly(gesture, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
x_train=fread("uWaveGestureLibrary_X_TRAIN")
x_test=fread("uWaveGestureLibrary_X_TEST")
y_train=fread("uWaveGestureLibrary_Y_TRAIN")
y_test=fread("uWaveGestureLibrary_Y_TEST")
z_train=fread("uWaveGestureLibrary_Z_TRAIN")
z_test=fread("uWaveGestureLibrary_Z_TEST")
class1_ind<-which(x_train$V1==1)[1]
class2_ind<-which(x_train$V1==2)[1]
class3_ind<-which(x_train$V1==3)[1]
class4_ind<-which(x_train$V1==4)[1]
class5_ind<-which(x_train$V1==5)[1]
class6_ind<-which(x_train$V1==6)[1]
class7_ind<-which(x_train$V1==7)[1]
class8_ind<-which(x_train$V1==8)[1]
#PART1
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
for(i in 1:8){
gesture <- data.table(x=t(x_train[indexes[i],2:315]),
y=t(y_train[indexes[i],2:315]),
z=t(z_train[indexes[i],2:315]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_cm=cumsum(gesture$x)
gesture$y_cm=cumsum(gesture$y)
gesture$z_cm=cumsum(gesture$z)
fig <- plot_ly(gesture, x = ~x_cm, y = ~y_cm, z = ~z_cm)
fig
}
library(data.table)
library(plotly)
library(scatterplot3d)
x_train=fread("uWaveGestureLibrary_X_TRAIN")
x_test=fread("uWaveGestureLibrary_X_TEST")
y_train=fread("uWaveGestureLibrary_Y_TRAIN")
y_test=fread("uWaveGestureLibrary_Y_TEST")
z_train=fread("uWaveGestureLibrary_Z_TRAIN")
z_test=fread("uWaveGestureLibrary_Z_TEST")
class1_ind<-which(x_train$V1==1)[1]
class2_ind<-which(x_train$V1==2)[1]
class3_ind<-which(x_train$V1==3)[1]
class4_ind<-which(x_train$V1==4)[1]
class5_ind<-which(x_train$V1==5)[1]
class6_ind<-which(x_train$V1==6)[1]
class7_ind<-which(x_train$V1==7)[1]
class8_ind<-which(x_train$V1==8)[1]
indexes<-c(class1_ind,class2_ind,class3_ind,class4_ind,class5_ind,class6_ind,class7_ind,class8_ind)
indexes
#PART1
gesture <- data.table(x=t(x_train[indexes[1],-1]),
y=t(y_train[indexes[1],-1]),
z=t(z_train[indexes[1],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
gesture <- data.table(x=t(x_train[indexes[2],-1]),
y=t(y_train[indexes[2],-1]),
z=t(z_train[indexes[2],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
gesture <- data.table(x=t(x_train[indexes[3],-1]),
y=t(y_train[indexes[3],-1]),
z=t(z_train[indexes[3],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
gesture <- data.table(x=t(x_train[indexes[4],-1]),
y=t(y_train[indexes[4],-1]),
z=t(z_train[indexes[4],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
gesture <- data.table(x=t(x_train[indexes[5],-1]),
y=t(y_train[indexes[5],-1]),
z=t(z_train[indexes[5],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
gesture <- data.table(x=t(x_train[indexes[6],-1]),
y=t(y_train[indexes[6],-1]),
z=t(z_train[indexes[6],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
gesture <- data.table(x=t(x_train[indexes[7],-1]),
y=t(y_train[indexes[7],-1]),
z=t(z_train[indexes[7],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
gesture <- data.table(x=t(x_train[indexes[8],-1]),
y=t(y_train[indexes[8],-1]),
z=t(z_train[indexes[8],-1]))
names(gesture)[names(gesture) == "x.V1"] <- "x"
names(gesture)[names(gesture) == "y.V1"] <- "y"
names(gesture)[names(gesture) == "z.V1"] <- "z"
gesture$x_v=cumsum(gesture$x)
gesture$y_v=cumsum(gesture$y)
gesture$z_v=cumsum(gesture$z)
gesture$x_location=cumsum(gesture$x_v)
gesture$y_location=cumsum(gesture$y_v)
gesture$z_location=cumsum(gesture$z_v)
scatterplot3d(gesture$x_location,gesture$y_location,gesture$z_location)
