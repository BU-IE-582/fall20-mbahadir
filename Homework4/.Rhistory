library(scatterplot3d)
# setcolorder
setcolorder(DT, c("C", "A", "B"))
library(data.table)
set.seed(45L)
DT = data.table(A=sample(3, 10, TRUE),
B=sample(letters[1:3], 10, TRUE), C=sample(10))
# setorder
setorder(DT, A, -B)
# same as above but using 'setorderv'
# setorderv(DT, c("A", "B"), c(1,-1))
# setcolorder
setcolorder(DT, c("C", "A", "B"))
library(data.table)
set.seed(45L)
DT = data.table(A=sample(3, 10, TRUE),
B=sample(letters[1:3], 10, TRUE), C=sample(10))
View(DT)
# setorder
setorder(DT, A, -B)
# setcolorder
setcolorder(DT, c("C", "A", "B"))
DT = data.table(A=sample(3, 10, TRUE),
B=sample(letters[1:3], 10, TRUE), C=sample(10))
View(DT)
# setorder
setorder(DT, A, -B)
View(DT)
# same as above but using 'setorderv'
# setorderv(DT, c("A", "B"), c(1,-1))
DT
getwd()
# install the required packages first
require(jsonlite)
require(httr)
require(data.table)
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:length(predictions)){
if(i<length(predictions)){
post_string=sprintf("%s%s,",post_string,predictions[i])
} else {
post_string=sprintf("%s%s)",post_string,predictions[i])
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
check_format <- function(predictions){
if(all(is.numeric(predictions)) & all(predictions<=1)){
print("Format OK")
return(TRUE)
} else {
print("Wrong format")
return(FALSE)
}
}
# this part is main code
subm_url = 'http://46.101.121.83'
u_name = "Miners"
p_word = "NsY7hhlU9zjl8DH3"
submit_now = TRUE
username = u_name
password = p_word
token = get_token(username=u_name, password=p_word, url=subm_url)
#### CODE for Random Forest
## Libraries
library(ggplot2)
library(GGally, quietly=TRUE)
library(data.table)
library(caTools)
library(randomForest)
library(caret)
library(e1071)
## Performance Measure Function
perf_dt=function(type,actual,forecast){
name=type
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
FBias=sum(error)/sum(actual)
MPE=sum(error/actual)/n
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2))/n
MAD=sum(abs(error))/n
WMAPE=MAD/mean
l=data.frame(name,n,mean,sd,FBias,MAPE,RMSE,MAD,WMAPE)
return(l)
}
## Dataset
dt=fread("C:/Users/bahad/GitHub/582project/bahadir/IE582_Fall20_ProjectTrain.csv")
final_test=fread("C:/Users/bahad/GitHub/582project/bahadir/IE582_Fall20_ProjectTest.csv")
## Change in the target Variable
# dt$y=as.numeric(as.factor(dt$y))
## Sample Split by considering dist
set.seed(35)
spl=sample.split(dt$y, SplitRatio = 0.8)
train=subset(dt,spl==TRUE)
test=subset(dt,spl==FALSE)
# table(train$y_num)
#
# train_y1=train[y_num==1]
# train_y2=train[y_num==2]
# train_sub_blc=as.data.table(train_y1[c( sample (c(1:1252), size=407, replace=F))])
# train_alt=rbind(train_sub_blc,train_y2)
random_forest=randomForest(as.factor(y)~.,data=train,ntree=200,nodesize=20)
random_forest
varImpPlot(random_forest)
PredictRandomForest=predict(random_forest,newdata=test)
table(test$y,PredictRandomForest)
### Performanca Measure
confusionMatrix(data = PredictRandomForest, reference = as.factor(test$y), mode = "prec_recall")
as.factor(test$y)
perf_dt("Random Forest",as.numeric(as.factor(test$y)),as.numeric(PredictRandomForest))
random_forest_final=randomForest(as.factor(y)~.,data=dt,ntree=300,nodesize=25)
random_forest_final
predictions_factor=predict(random_forest,newdata=final_test)
predictions=as.numeric(predictions_factor)-1
send_submission(predictions, token, url=subm_url, submit_now= submit_now)
setwd("C:/Users/bahad/GitHub/fall20-IE582/Homework4")
getwd()
